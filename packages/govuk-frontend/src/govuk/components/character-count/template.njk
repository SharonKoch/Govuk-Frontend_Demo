{% from "../../macros/i18n.njk" import govukI18nAttributes %}
{% from "../textarea/macro.njk" import govukTextarea %}
{% from "../hint/macro.njk" import govukHint %}

{#-
  If the limit is set in JavaScript, we won't be able to interpolate the message
  until JavaScript, so we only set a text if the `maxlength` or `maxwords` options
  were provided to the macro.
#}
{%- set hasNoLimit = (not params.maxwords and not params.maxlength) -%}
{%- set textareaDescriptionLength = params.maxwords or params.maxlength -%}
{%- set textareaDescriptionText = params.textareaDescriptionText or 'You can enter up to %{count} ' + ('words' if params.maxwords else 'characters') -%}
{%- set textareaDescriptionTextNoLimit = textareaDescriptionText | replace('%{count}', textareaDescriptionLength) if not hasNoLimit -%}

{#-
  Unlike objects which cannot be modified, Nunjucks can both push to and loop
  arrays (as if they were objects) when in `Object.entries()` array format
#}
{%- set attributes = [] -%}

{%- if params.maxlength %}{% set attributes = (attributes.push(["data-maxlength", params.maxlength]), attributes) %}{% endif -%}
{%- if params.threshold %}{% set attributes = (attributes.push(["data-threshold", params.threshold]), attributes) %}{% endif -%}
{%- if params.maxwords %}{% set attributes = (attributes.push(["data-maxwords", params.maxwords]), attributes) %}{% endif -%}

{#-
  Without maxlength or maxwords, we can't guess if the component will count words or characters.
  We can't guess a default textarea description to be interpolated in JavaScript
  once the maximum gets configured there.
  So we only add the attribute if a textarea description was explicitely provided.
#}
{%- if hasNoLimit and params.textareaDescriptionText %}
  {% set attributes = (attributes.push(["data-i18n.textarea-description.other", params.textareaDescriptionText | escape]), attributes) %}
{% endif -%}

{%- if params.charactersUnderLimitText %}
  {% for pluralRule, message in params.charactersUnderLimitText %}
    {% set attributes = (attributes.push(["data-i18n.characters-under-limit." + pluralRule, message | escape]), attributes) %}
  {% endfor %}
{% endif -%}

{%- if params.charactersAtLimitText %}
  {% set attributes = (attributes.push(["data-i18n.characters-at-limit", params.charactersAtLimitText | escape]), attributes) %}
{% endif -%}

{%- if params.charactersOverLimitText %}
  {% for pluralRule, message in params.charactersOverLimitText %}
    {% set attributes = (attributes.push(["data-i18n.characters-over-limit." + pluralRule, message | escape]), attributes) %}
  {% endfor %}
{% endif -%}

{%- if params.wordsUnderLimitText %}
  {% for pluralRule, message in params.wordsUnderLimitText %}
    {% set attributes = (attributes.push(["data-i18n.words-under-limit." + pluralRule, message | escape]), attributes) %}
  {% endfor %}
{% endif -%}

{%- if params.wordsAtLimitText %}
  {% set attributes = (attributes.push(["data-i18n.words-at-limit", params.wordsAtLimitText | escape]), attributes) %}
{% endif -%}

{%- if params.wordsOverLimitText %}
  {% for pluralRule, message in params.wordsOverLimitText %}
    {% set attributes = (attributes.push(["data-i18n.words-over-limit." + pluralRule, message | escape]), attributes) %}
  {% endfor %}
{% endif -%}

{%- set countMessageHtml %}
{{ govukHint({
  text: textareaDescriptionTextNoLimit,
  id: params.id + '-info',
  classes: 'govuk-character-count__message' + (' ' + params.countMessage.classes if params.countMessage.classes)
}) | trim }}
{% if params.formGroup.afterInput %}
  {{- params.formGroup.afterInput.html | safe | trim if params.formGroup.afterInput.html else params.formGroup.afterInput.text }}
{% endif -%}
{% endset -%}

<div class="govuk-character-count" data-module="govuk-character-count" {%- for attribute, value in attributes %} {{ attribute }}="{{ value }}"{% endfor %}>
  {{ govukTextarea({
    id: params.id,
    name: params.name,
    describedBy: params.id + '-info',
    rows: params.rows,
    spellcheck: params.spellcheck,
    value: params.value,
    formGroup: {
      classes: params.formGroup.classes,
      attributes: params.formGroup.attributes,
      beforeInput: params.formGroup.beforeInput,
      afterInput: {
        html: countMessageHtml
      }
    },
    classes: 'govuk-js-character-count' + (' ' + params.classes if params.classes),
    label: {
      html: params.label.html,
      text: params.label.text,
      classes: params.label.classes,
      isPageHeading: params.label.isPageHeading,
      attributes: params.label.attributes,
      for: params.id
    },
    hint: params.hint,
    errorMessage: params.errorMessage,
    attributes: params.attributes
  }) | trim }}
</div>
